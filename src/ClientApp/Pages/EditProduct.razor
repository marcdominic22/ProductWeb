@page "/products/edit/{id:int}"
@using ClientApp.Data
@using ProductCRUD.Application.Common.Dtos
@using ProductCRUD.Application.Products.Commands.UpdateProduct
@inject ProductService ProductService
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h3>Edit Product</h3>

@if (Product != null)
{
    <EditForm Model="Product" OnValidSubmit="UpdateProduct">
    <div class="form-group">
        <label for="name">Product Name:</label>
        <InputText id="name" @bind-Value="Product.Name" class="form-control" />
    </div>
    
    <div class="form-group">
        <label for="sname">Supplier Name:</label>
        <InputText id="sname" @bind-Value="Product.SupplierName" class="form-control" />
    </div>
    
    <div class="form-group">
        <label for="desc">Description:</label>
        <InputText id="desc" @bind-Value="Product.Description" class="form-control" />
    </div>
    
    <div class="form-group">
        <label for="price">Price:</label>
        <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
    </div>
    
    <div class="form-group">
        <label for="tax">Tax:</label>
        <InputNumber id="tax" @bind-Value="Product.Tax" class="form-control" />
    </div>
    <p>
        <button type="submit" class="btn btn-primary">Save</button>
    </p>
</EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    ProductDto Product = new ProductDto();

    protected override async Task OnInitializedAsync()
    {
        Product = await ProductService.GetProductById(Id);
    }

    private async Task UpdateProduct()
    {
        await ProductService.UpdateProduct(Id, new UpdateProductCommand
        {
            Id = Id,
            ProductName = Product.Name,
            SupplierName = Product.SupplierName,
            Description = Product.Description,
            Price = Product.Price,
            Tax = Product.Tax,
        });

        NavigationManager.NavigateTo("/products");
    }
}