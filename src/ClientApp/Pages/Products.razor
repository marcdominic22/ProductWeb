@page "/products"
@using ClientApp.Data
@using ProductCRUD.Application.Common.Dtos
@inject ProductService ProductService
@inject NavigationManager NavigationManager

<PageTitle>Products List</PageTitle>

<h3>Products</h3>
<p>
    <button class="btn btn-primary" @onclick="CreateProduct">Create Product</button>
</p>
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Supplier</th>
            <th>Date Created</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in ProductsRes)
        {
            <tr>
                <td>@product.Id</td>
                <td>@product.Name</td>
                <td>@product.SupplierName</td>
                <td>@product.DateCreated</td>
                <td>
                    <button @onclick="() => EditProduct(product.Id)">Edit</button>
                    <button @onclick="() => DeleteProduct(product.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    List<ProductDto> ProductsRes = new List<ProductDto>();

    protected override async Task OnInitializedAsync()
    {
        ProductsRes = await ProductService.GetProducts();
    }

    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/products/edit/{id}");
    }

    private void CreateProduct()
    {
        NavigationManager.NavigateTo("/products/create");
    }

    private async Task DeleteProduct(int id)
    {
        // You might want to add confirmation logic here before deleting

        // Call your ProductService to delete the product
        await ProductService.DeleteProductById(id);

        // After deletion, refresh the list of products
        ProductsRes = await ProductService.GetProducts();
    }
}
